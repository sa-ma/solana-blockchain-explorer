import Head from 'next/head';
import { useState, useEffect } from 'react';
import axios from 'axios';
import { fromUnixTime, format } from 'date-fns';
import { useRouter } from 'next/router';

export default function TransactionDetail() {
    const [loading, setLoading] = useState(false);
    const [transactionData, setTransactionData] = useState();
    const [errorMessage, setErrorMessage] = useState('');
    const router = useRouter();

    useEffect(() => {
        const getTransaction = async () => {
            try {
                setLoading(true);
                setErrorMessage('');

                const response = await axios.post('/api/transaction', {
                    transactionHash: router.query?.id,
                });

                if (response.status === 200) {
                    setTransactionData(response.data.transaction);
                }
            } catch (error) {
                setErrorMessage(error?.message || error || 'Unable to fetch transaction. Please try again later.');
            } finally {
                setLoading(false);
            }
        };

        getTransaction();
    }, [router.query?.id]);

    return (
        <>
            <Head>
                <title>Solana Blockchain Explorer</title>
                <meta name='description' content='Generated by create next app' />
                <meta name='viewport' content='width=device-width, initial-scale=1' />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <main className='w-full h-full p-6 flex flex-col items-center justify-between gap-6 mx-auto relative'>
                <h1 className='text-2xl'>Transaction</h1>
                {errorMessage && <p className='text-red-600 text-base text-center my-1'>{errorMessage}</p>}

                <div className='w-full'>
                    {!loading && transactionData && (
                        <div className='rounded-lg border max-w-xl overflow-x-auto mx-auto'>
                            <table className='table-auto w-full border-collapse p-4'>
                                <tbody className='overflow-x-scroll'>
                                    <tr className='border-b'>
                                        <td className='font-medium text-sm p-4'>Signature</td>
                                        <td className='p-4'>{transactionData.transaction.signatures[0]}</td>
                                    </tr>
                                    <tr className='border-b'>
                                        <td className='font-medium text-sm p-4'>Timestamp</td>
                                        <td className='p-4'>
                                            {format(
                                                fromUnixTime(transactionData?.blockTime),
                                                "MMMM d, yyyy 'at' HH:mm:ss OOOO"
                                            )}
                                        </td>
                                    </tr>
                                    <tr className='border-b'>
                                        <td className='font-medium text-sm p-4'>Recent Blockhash</td>
                                        <td className='p-4'>{transactionData.transaction.message.recentBlockhash}</td>
                                    </tr>
                                    <tr className='border-b'>
                                        <td className='font-medium text-sm p-4'>Slot</td>
                                        <td className='p-4'>{Intl.NumberFormat().format(transactionData.slot)}</td>
                                    </tr>
                                    <tr className='border-b'>
                                        <td className='font-medium text-sm p-4'>Fee</td>
                                        <td className='p-4'>◎{transactionData.meta.fee / 1_000_000_000}</td>
                                    </tr>
                                    <tr className='border-b'>
                                        <td className='font-medium text-sm p-4'>Amount</td>
                                        <td className='p-4'>
                                            ◎
                                            {transactionData.transaction.message.instructions[0].parsed.info.lamports /
                                                1_000_000_000}
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    )}
                    {!loading && !transactionData && <p className='text-center'>No transaction to display</p>}
                </div>

                {loading && (
                    <div className='absolute inset-0 bg-white/70 flex items-center justify-center'>Loading</div>
                )}
            </main>
        </>
    );
}
