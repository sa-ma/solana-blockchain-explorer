import Head from 'next/head';
import Link from 'next/link';
import { useState } from 'react';
import axios from 'axios';
import { fromUnixTime, format, formatDistanceToNow } from 'date-fns';

export default function Home() {
    const [loading, setLoading] = useState(false);
    const [transactionList, setTransactionList] = useState([]);
    const [balance, setBalance] = useState(null);
    const [address, setAddress] = useState('');
    const [errorMessage, setErrorMessage] = useState('');

    const handleFormSubmit = async (event) => {
        try {
            event.preventDefault();
            setLoading(true);
            setErrorMessage('');

            const response = await axios.get(`/api/transactions/?address=${address}`);
            if (response.status === 200) {
                setTransactionList(response.data.transactionList);
                const accountBalanceText = response.data.accountBalance;
                const accountBalance = parseInt(accountBalanceText) / 1_000_000_000;

                accountBalance && setBalance(accountBalance);
            }
        } catch (error) {
            setErrorMessage(error?.message || error || 'Unable to fetch transactions. Please try again later.');
        } finally {
        }

        setLoading(false);
    };
    return (
        <>
            <Head>
                <title>Solana Blockchain Explorer</title>
                <meta name='description' content='Generated by create next app' />
                <meta name='viewport' content='width=device-width, initial-scale=1' />
                <link rel='icon' href='/favicon.ico' />
            </Head>
            <main className='w-full h-full max-w-2xl p-6 flex flex-col items-center justify-between gap-6 mx-auto relative'>
                <h1 className='text-2xl'>Solana Blockchain Explorer</h1>
                <form onSubmit={handleFormSubmit} className='flex flex-wrap w-full'>
                    <label htmlFor='address' className='w-full shrink-0 text-lg mb-2'>
                        Transaction address
                    </label>
                    <input
                        type='text'
                        name='address'
                        value={address}
                        onChange={(event) => setAddress(event.target.value)}
                        className='
                            w-3/4 border-2 border-r-0 border-gray-500 h-12
                            rounded-l-lg px-4 focus:outline-none focus:border-blue-600
                            disabled:bg-gray-500
                            transition-colors duration-150
                        '
                        placeholder='CHrNmjoRzaGCL...'
                        disabled={loading}
                        required
                    />
                    <button
                        type='submit'
                        disabled={loading}
                        className='
                            flex-grow bg-blue-600 flex items-center justify-center
                            rounded-r-lg text-white text-sm hover:bg-blue-900
                            disabled:bg-gray-500
                            transition-colors duration-150
                        '
                    >
                        Search
                    </button>
                    {errorMessage && <p className='text-red-600 text-base my-1'>{errorMessage}</p>}
                </form>

                <div
                    className={`overflow-hidden transition-all duration-300 max-h-fit w-full ${
                        balance && transactionList.length > 0 ? 'h-full' : 'h-0'
                    }`}
                >
                    {balance && (
                        <h2 className='flex justify-between text-lg mb-4'>
                            Balance: <span>â—Ž{balance}</span>
                        </h2>
                    )}

                    <div className='overflow-x-auto'>
                        <table className='w-full border-spacing-x-4 -ml-4 border-separate'>
                            <thead className='text-left'>
                                <tr>
                                    <th className='font-medium'>Signature</th>
                                    <th className='font-medium'>Block</th>
                                    <th className='font-medium'>Age</th>
                                    <th className='font-medium'>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                {transactionList.map((transaction) => (
                                    <tr key={transaction?.signature}>
                                        <td className='truncate max-w-[230px] text-blue-600 hover:underline'>
                                            <Link href={`/transaction/${transaction?.signature}`}>
                                                {transaction?.signature}
                                            </Link>
                                        </td>
                                        <td>{transaction?.slot}</td>
                                        <td
                                            className='whitespace-nowrap'
                                            title={format(
                                                fromUnixTime(transaction?.blockTime),
                                                "MMMM d, yyyy 'at' HH:mm:ss OOOO"
                                            )}
                                        >
                                            {formatDistanceToNow(fromUnixTime(transaction?.blockTime), {
                                                includeSeconds: true,
                                            })}
                                        </td>
                                        <td>
                                            <span
                                                className={`inline-block px-2 py-1 rounded-full text-xs font-bold leading-none text-white ${
                                                    transaction?.confirmationStatus === 'finalized'
                                                        ? 'bg-green-500'
                                                        : 'bg-yellow-400'
                                                }`}
                                            >
                                                {transaction?.confirmationStatus}
                                            </span>
                                        </td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>

                {loading && (
                    <div className='absolute inset-0 bg-white/70 flex items-center justify-center'>Loading</div>
                )}
            </main>
        </>
    );
}
